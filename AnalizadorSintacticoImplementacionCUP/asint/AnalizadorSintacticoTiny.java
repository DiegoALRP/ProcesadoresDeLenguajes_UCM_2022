
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Mar 21 14:28:26 CET 2022
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErroresTiny;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Mar 21 14:28:26 CET 2022
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\012\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\010\000\002\006\006\000\002\007\005\000\002\007\003" +
    "\000\002\010\004\000\002\011\003\000\002\011\002\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\004\000\002\014\003\000\002\014\002\000\002\015" +
    "\003\000\002\015\005\000\002\016\005\000\002\016\010" +
    "\000\002\016\007\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\007\000\002\016\005\000\002\017\004\000\002\017" +
    "\002\000\002\020\005\000\002\020\003\000\002\020\002" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\026\004" +
    "\000\002\026\003\000\002\027\004\000\002\027\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\005\000\002\030\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\005\000\002\034\004\000\002\034\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\060\006\004\007\ufffe\010\011\011\006\012" +
    "\ufffe\014\ufffe\021\ufffe\022\ufffe\025\ufffe\027\ufffe\030\ufffe" +
    "\034\ufffe\037\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\052\ufffe\053\ufffe\071\ufffe\072\ufffe\001\002" +
    "\000\022\007\022\016\020\017\026\020\016\026\024\040" +
    "\023\041\021\043\025\001\002\000\004\002\222\001\002" +
    "\000\004\007\203\001\002\000\006\004\ufffd\005\ufffd\001" +
    "\002\000\052\007\056\012\073\014\102\021\060\022\075" +
    "\025\053\027\100\030\061\034\052\037\051\044\076\045" +
    "\077\046\047\047\064\050\103\051\050\052\101\053\054" +
    "\071\046\072\067\001\002\000\022\007\022\016\020\017" +
    "\026\020\016\026\024\040\023\041\021\043\025\001\002" +
    "\000\006\004\013\005\014\001\002\000\052\007\uffff\012" +
    "\uffff\014\uffff\021\uffff\022\uffff\025\uffff\027\uffff\030\uffff" +
    "\034\uffff\037\uffff\044\uffff\045\uffff\046\uffff\047\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\071\uffff\072\uffff\001\002" +
    "\000\010\006\004\010\011\011\006\001\002\000\006\004" +
    "\ufffc\005\ufffc\001\002\000\006\007\ufff6\065\ufff6\001\002" +
    "\000\004\007\045\001\002\000\006\007\ufff8\065\ufff8\001" +
    "\002\000\004\054\040\001\002\000\006\007\ufff4\065\ufff4" +
    "\001\002\000\004\014\030\001\002\000\006\007\ufff5\065" +
    "\ufff5\001\002\000\022\007\022\016\020\017\026\020\016" +
    "\026\024\040\023\041\021\043\025\001\002\000\006\007" +
    "\ufff7\065\ufff7\001\002\000\006\007\ufff3\065\ufff3\001\002" +
    "\000\022\007\022\016\020\017\026\020\016\026\024\040" +
    "\023\041\021\043\025\001\002\000\004\007\037\001\002" +
    "\000\006\005\035\015\034\001\002\000\006\005\uffef\015" +
    "\uffef\001\002\000\006\007\ufff1\065\ufff1\001\002\000\022" +
    "\007\022\016\020\017\026\020\016\026\024\040\023\041" +
    "\021\043\025\001\002\000\006\005\ufff0\015\ufff0\001\002" +
    "\000\006\005\uffee\015\uffee\001\002\000\004\052\041\001" +
    "\002\000\004\055\042\001\002\000\004\042\043\001\002" +
    "\000\022\007\022\016\020\017\026\020\016\026\024\040" +
    "\023\041\021\043\025\001\002\000\006\007\ufff2\065\ufff2" +
    "\001\002\000\006\004\ufffa\005\ufffa\001\002\000\024\007" +
    "\056\012\073\021\060\022\075\027\100\051\050\052\101" +
    "\053\054\072\067\001\002\000\030\007\056\012\073\021" +
    "\060\022\075\025\053\027\100\051\050\052\101\053\054" +
    "\071\046\072\067\001\002\000\072\002\uffc0\005\uffc0\013" +
    "\uffc0\015\uffc0\023\uffc0\024\uffc0\031\uffc0\032\uffc0\033\uffc0" +
    "\035\uffc0\036\uffc0\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060" +
    "\uffc0\061\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\067\uffc0" +
    "\070\uffc0\071\uffc0\072\uffc0\073\uffc0\074\uffc0\075\uffc0\001" +
    "\002\000\004\007\172\001\002\000\030\007\056\012\073" +
    "\021\060\022\075\025\053\027\100\051\050\052\101\053" +
    "\054\071\046\072\067\001\002\000\030\007\056\012\073" +
    "\021\060\022\075\025\053\027\100\051\050\052\101\053" +
    "\054\071\046\072\067\001\002\000\072\002\uffc1\005\uffc1" +
    "\013\uffc1\015\uffc1\023\uffc1\024\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\035\uffc1\036\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\061\uffc1\062\uffc1\063\uffc1\064\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\072\uffc1\073\uffc1\074\uffc1\075\uffc1" +
    "\001\002\000\072\002\uffc5\005\uffc5\013\uffc5\015\uffc5\023" +
    "\uffc5\024\uffc5\031\uffc5\032\uffc5\033\uffc5\035\uffc5\036\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\064\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5" +
    "\072\uffc5\073\uffc5\074\uffc5\075\uffc5\001\002\000\072\002" +
    "\uffbd\005\uffbd\013\uffbd\015\uffbd\023\uffbd\024\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\035\uffbd\036\uffbd\054\uffbd\055\uffbd\056" +
    "\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\066\uffbd\067\uffbd\070\uffbd\071\uffbd\072\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\001\002\000\072\002\uffc7\005\uffc7\013\uffc7" +
    "\015\uffc7\023\uffc7\024\uffc7\031\uffc7\032\uffc7\033\uffc7\035" +
    "\uffc7\036\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7" +
    "\061\uffc7\062\uffc7\063\uffc7\064\uffc7\066\uffc7\067\uffc7\070" +
    "\uffc7\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\001\002" +
    "\000\072\002\uffc4\005\uffc4\013\uffc4\015\uffc4\023\uffc4\024" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\035\uffc4\036\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063" +
    "\uffc4\064\uffc4\066\uffc4\067\uffc4\070\uffc4\071\uffc4\072\uffc4" +
    "\073\uffc4\074\uffc4\075\uffc4\001\002\000\030\007\056\012" +
    "\073\021\060\022\075\025\053\027\100\051\050\052\101" +
    "\053\054\071\046\072\067\001\002\000\072\002\uffc9\005" +
    "\uffc9\013\uffc9\015\uffc9\023\uffc9\024\uffc9\031\uffc9\032\uffc9" +
    "\033\uffc9\035\uffc9\036\uffc9\054\151\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\064\uffc9\066\147" +
    "\067\uffc9\070\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075" +
    "\150\001\002\000\064\002\uffcc\005\uffcc\013\uffcc\015\uffcc" +
    "\023\uffcc\024\uffcc\031\uffcc\032\uffcc\033\uffcc\035\uffcc\036" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc" +
    "\063\uffcc\064\uffcc\067\uffcc\070\uffcc\071\uffcc\072\143\073" +
    "\142\074\141\001\002\000\030\007\056\012\073\021\060" +
    "\022\075\025\053\027\100\051\050\052\101\053\054\071" +
    "\046\072\067\001\002\000\016\002\uffe5\005\uffe5\015\uffe5" +
    "\032\uffe5\033\uffe5\036\uffe5\001\002\000\056\002\uffce\005" +
    "\uffce\013\uffce\015\uffce\023\uffce\024\uffce\031\uffce\032\uffce" +
    "\033\uffce\035\uffce\036\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\062\uffce\063\uffce\064\uffce\067\uffce\070\uffce" +
    "\071\uffce\001\002\000\024\007\056\012\073\021\060\022" +
    "\075\027\100\051\050\052\101\053\054\072\067\001\002" +
    "\000\056\002\uffd0\005\uffd0\013\uffd0\015\uffd0\023\uffd0\024" +
    "\uffd0\031\uffd0\032\uffd0\033\uffd0\035\uffd0\036\uffd0\055\uffd0" +
    "\056\uffd0\057\127\060\132\061\131\062\134\063\133\064" +
    "\130\067\uffd0\070\uffd0\071\uffd0\001\002\000\042\002\uffd2" +
    "\005\uffd2\013\uffd2\015\uffd2\023\120\024\123\031\uffd2\032" +
    "\uffd2\033\uffd2\035\uffd2\036\uffd2\055\uffd2\056\uffd2\067\uffd2" +
    "\070\117\071\122\001\002\000\004\056\115\001\002\000" +
    "\030\007\056\012\073\021\060\022\075\025\053\027\100" +
    "\051\050\052\101\053\054\071\046\072\067\001\002\000" +
    "\010\002\001\005\111\015\001\001\002\000\072\002\uffc3" +
    "\005\uffc3\013\uffc3\015\uffc3\023\uffc3\024\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\035\uffc3\036\uffc3\054\uffc3\055\uffc3\056\uffc3" +
    "\057\uffc3\060\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\066" +
    "\uffc3\067\uffc3\070\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\001\002\000\030\007\056\012\073\021\060\022" +
    "\075\025\053\027\100\051\050\052\101\053\054\071\046" +
    "\072\067\001\002\000\030\007\056\012\073\021\060\022" +
    "\075\025\053\027\100\051\050\052\101\053\054\071\046" +
    "\072\067\001\002\000\072\002\uffbf\005\uffbf\013\uffbf\015" +
    "\uffbf\023\uffbf\024\uffbf\031\uffbf\032\uffbf\033\uffbf\035\uffbf" +
    "\036\uffbf\054\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\061" +
    "\uffbf\062\uffbf\063\uffbf\064\uffbf\066\uffbf\067\uffbf\070\uffbf" +
    "\071\uffbf\072\uffbf\073\uffbf\074\uffbf\075\uffbf\001\002\000" +
    "\072\002\uffc2\005\uffc2\013\uffc2\015\uffc2\023\uffc2\024\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\035\uffc2\036\uffc2\054\uffc2\055" +
    "\uffc2\056\uffc2\057\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2" +
    "\064\uffc2\066\uffc2\067\uffc2\070\uffc2\071\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\075\uffc2\001\002\000\062\006\004\007\ufffe" +
    "\010\011\011\006\012\ufffe\014\ufffe\015\uffe6\021\ufffe\022" +
    "\ufffe\025\ufffe\027\ufffe\030\ufffe\034\ufffe\037\ufffe\044\ufffe" +
    "\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe\053" +
    "\ufffe\071\ufffe\072\ufffe\001\002\000\016\002\uffde\005\uffde" +
    "\015\uffde\032\uffde\033\uffde\036\uffde\001\002\000\004\015" +
    "\uffe7\001\002\000\004\015\106\001\002\000\016\002\uffda" +
    "\005\uffda\015\uffda\032\uffda\033\uffda\036\uffda\001\002\000" +
    "\016\002\uffdc\005\uffdc\015\uffdc\032\uffdc\033\uffdc\036\uffdc" +
    "\001\002\000\016\002\uffdd\005\uffdd\015\uffdd\032\uffdd\033" +
    "\uffdd\036\uffdd\001\002\000\052\007\056\012\073\014\102" +
    "\021\060\022\075\025\053\027\100\030\061\034\052\037" +
    "\051\044\076\045\077\046\047\047\064\050\103\051\050" +
    "\052\101\053\054\071\046\072\067\001\002\000\016\002" +
    "\uffe4\005\uffe4\015\uffe4\032\uffe4\033\uffe4\036\uffe4\001\002" +
    "\000\004\013\114\001\002\000\072\002\uffbe\005\uffbe\013" +
    "\uffbe\015\uffbe\023\uffbe\024\uffbe\031\uffbe\032\uffbe\033\uffbe" +
    "\035\uffbe\036\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe\060" +
    "\uffbe\061\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe\067\uffbe" +
    "\070\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe\075\uffbe\001" +
    "\002\000\030\007\056\012\073\021\060\022\075\025\053" +
    "\027\100\051\050\052\101\053\054\071\046\072\067\001" +
    "\002\000\016\002\uffe3\005\uffe3\015\uffe3\032\uffe3\033\uffe3" +
    "\036\uffe3\001\002\000\030\007\056\012\073\021\060\022" +
    "\075\025\053\027\100\051\050\052\101\053\054\071\046" +
    "\072\067\001\002\000\030\007\uffbc\012\uffbc\021\uffbc\022" +
    "\uffbc\025\uffbc\027\uffbc\051\uffbc\052\uffbc\053\uffbc\071\uffbc" +
    "\072\uffbc\001\002\000\030\007\056\012\073\021\060\022" +
    "\075\025\053\027\100\051\050\052\101\053\054\071\046" +
    "\072\067\001\002\000\030\007\056\012\073\021\060\022" +
    "\075\025\053\027\100\051\050\052\101\053\054\071\046" +
    "\072\067\001\002\000\030\007\uffbb\012\uffbb\021\uffbb\022" +
    "\uffbb\025\uffbb\027\uffbb\051\uffbb\052\uffbb\053\uffbb\071\uffbb" +
    "\072\uffbb\001\002\000\036\002\uffd3\005\uffd3\013\uffd3\015" +
    "\uffd3\023\120\024\123\031\uffd3\032\uffd3\033\uffd3\035\uffd3" +
    "\036\uffd3\055\uffd3\056\uffd3\067\uffd3\001\002\000\056\002" +
    "\uffd1\005\uffd1\013\uffd1\015\uffd1\023\uffd1\024\uffd1\031\uffd1" +
    "\032\uffd1\033\uffd1\035\uffd1\036\uffd1\055\uffd1\056\uffd1\057" +
    "\127\060\132\061\131\062\134\063\133\064\130\067\uffd1" +
    "\070\uffd1\071\uffd1\001\002\000\030\007\056\012\073\021" +
    "\060\022\075\025\053\027\100\051\050\052\101\053\054" +
    "\071\046\072\067\001\002\000\030\007\uffb6\012\uffb6\021" +
    "\uffb6\022\uffb6\025\uffb6\027\uffb6\051\uffb6\052\uffb6\053\uffb6" +
    "\071\uffb6\072\uffb6\001\002\000\030\007\uffb5\012\uffb5\021" +
    "\uffb5\022\uffb5\025\uffb5\027\uffb5\051\uffb5\052\uffb5\053\uffb5" +
    "\071\uffb5\072\uffb5\001\002\000\030\007\uffba\012\uffba\021" +
    "\uffba\022\uffba\025\uffba\027\uffba\051\uffba\052\uffba\053\uffba" +
    "\071\uffba\072\uffba\001\002\000\030\007\uffb9\012\uffb9\021" +
    "\uffb9\022\uffb9\025\uffb9\027\uffb9\051\uffb9\052\uffb9\053\uffb9" +
    "\071\uffb9\072\uffb9\001\002\000\030\007\uffb8\012\uffb8\021" +
    "\uffb8\022\uffb8\025\uffb8\027\uffb8\051\uffb8\052\uffb8\053\uffb8" +
    "\071\uffb8\072\uffb8\001\002\000\030\007\uffb7\012\uffb7\021" +
    "\uffb7\022\uffb7\025\uffb7\027\uffb7\051\uffb7\052\uffb7\053\uffb7" +
    "\071\uffb7\072\uffb7\001\002\000\056\002\uffcf\005\uffcf\013" +
    "\uffcf\015\uffcf\023\uffcf\024\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\035\uffcf\036\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061" +
    "\uffcf\062\uffcf\063\uffcf\064\uffcf\067\uffcf\070\uffcf\071\uffcf" +
    "\001\002\000\032\002\uffd4\005\uffd4\013\uffd4\015\uffd4\031" +
    "\uffd4\032\uffd4\033\uffd4\035\uffd4\036\uffd4\055\uffd4\056\uffd4" +
    "\067\uffd4\001\002\000\072\002\uffc6\005\uffc6\013\uffc6\015" +
    "\uffc6\023\uffc6\024\uffc6\031\uffc6\032\uffc6\033\uffc6\035\uffc6" +
    "\036\uffc6\054\uffc6\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\064\uffc6\066\uffc6\067\uffc6\070\uffc6" +
    "\071\uffc6\072\uffc6\073\uffc6\074\uffc6\075\uffc6\001\002\000" +
    "\016\002\uffdf\005\uffdf\015\uffdf\032\uffdf\033\uffdf\036\uffdf" +
    "\001\002\000\030\007\uffb2\012\uffb2\021\uffb2\022\uffb2\025" +
    "\uffb2\027\uffb2\051\uffb2\052\uffb2\053\uffb2\071\uffb2\072\uffb2" +
    "\001\002\000\030\007\uffb3\012\uffb3\021\uffb3\022\uffb3\025" +
    "\uffb3\027\uffb3\051\uffb3\052\uffb3\053\uffb3\071\uffb3\072\uffb3" +
    "\001\002\000\030\007\uffb4\012\uffb4\021\uffb4\022\uffb4\025" +
    "\uffb4\027\uffb4\051\uffb4\052\uffb4\053\uffb4\071\uffb4\072\uffb4" +
    "\001\002\000\030\007\056\012\073\021\060\022\075\025" +
    "\053\027\100\051\050\052\101\053\054\071\046\072\067" +
    "\001\002\000\056\002\uffcd\005\uffcd\013\uffcd\015\uffcd\023" +
    "\uffcd\024\uffcd\031\uffcd\032\uffcd\033\uffcd\035\uffcd\036\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\067\uffcd\070\uffcd\071\uffcd\001\002\000\072" +
    "\002\uffc8\005\uffc8\013\uffc8\015\uffc8\023\uffc8\024\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\035\uffc8\036\uffc8\054\uffc8\055\uffc8" +
    "\056\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064" +
    "\uffc8\066\uffc8\067\uffc8\070\uffc8\071\uffc8\072\uffc8\073\uffc8" +
    "\074\uffc8\075\uffc8\001\002\000\004\007\155\001\002\000" +
    "\004\007\154\001\002\000\030\007\056\012\073\021\060" +
    "\022\075\025\053\027\100\051\050\052\101\053\054\071" +
    "\046\072\067\001\002\000\004\055\153\001\002\000\072" +
    "\002\uffb1\005\uffb1\013\uffb1\015\uffb1\023\uffb1\024\uffb1\031" +
    "\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1\054\uffb1\055\uffb1" +
    "\056\uffb1\057\uffb1\060\uffb1\061\uffb1\062\uffb1\063\uffb1\064" +
    "\uffb1\066\uffb1\067\uffb1\070\uffb1\071\uffb1\072\uffb1\073\uffb1" +
    "\074\uffb1\075\uffb1\001\002\000\072\002\uffb0\005\uffb0\013" +
    "\uffb0\015\uffb0\023\uffb0\024\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\035\uffb0\036\uffb0\054\uffb0\055\uffb0\056\uffb0\057\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\064\uffb0\066\uffb0\067\uffb0" +
    "\070\uffb0\071\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\001" +
    "\002\000\072\002\uffaf\005\uffaf\013\uffaf\015\uffaf\023\uffaf" +
    "\024\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036\uffaf\054" +
    "\uffaf\055\uffaf\056\uffaf\057\uffaf\060\uffaf\061\uffaf\062\uffaf" +
    "\063\uffaf\064\uffaf\066\uffaf\067\uffaf\070\uffaf\071\uffaf\072" +
    "\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002\000\004\031\157" +
    "\001\002\000\052\007\056\012\073\014\102\021\060\022" +
    "\075\025\053\027\100\030\061\034\052\037\051\044\076" +
    "\045\077\046\047\047\064\050\103\051\050\052\101\053" +
    "\054\071\046\072\067\001\002\000\010\005\111\032\161" +
    "\033\uffd8\001\002\000\052\007\056\012\073\014\102\021" +
    "\060\022\075\025\053\027\100\030\061\034\052\037\051" +
    "\044\076\045\077\046\047\047\064\050\103\051\050\052" +
    "\101\053\054\071\046\072\067\001\002\000\004\033\163" +
    "\001\002\000\016\002\uffe2\005\uffe2\015\uffe2\032\uffe2\033" +
    "\uffe2\036\uffe2\001\002\000\006\005\111\033\uffd9\001\002" +
    "\000\064\002\uffca\005\uffca\013\uffca\015\uffca\023\uffca\024" +
    "\uffca\031\uffca\032\uffca\033\uffca\035\uffca\036\uffca\055\uffca" +
    "\056\uffca\057\uffca\060\uffca\061\uffca\062\uffca\063\uffca\064" +
    "\uffca\067\uffca\070\uffca\071\uffca\072\uffca\073\uffca\074\uffca" +
    "\001\002\000\004\035\167\001\002\000\052\007\056\012" +
    "\073\014\102\021\060\022\075\025\053\027\100\030\061" +
    "\034\052\037\051\044\076\045\077\046\047\047\064\050" +
    "\103\051\050\052\101\053\054\071\046\072\067\001\002" +
    "\000\006\005\111\036\171\001\002\000\016\002\uffe1\005" +
    "\uffe1\015\uffe1\032\uffe1\033\uffe1\036\uffe1\001\002\000\004" +
    "\012\173\001\002\000\034\007\056\012\073\013\uffd5\021" +
    "\060\022\075\025\053\027\100\051\050\052\101\053\054" +
    "\067\uffd5\071\046\072\067\001\002\000\006\013\177\067" +
    "\176\001\002\000\006\013\uffd6\067\uffd6\001\002\000\030" +
    "\007\056\012\073\021\060\022\075\025\053\027\100\051" +
    "\050\052\101\053\054\071\046\072\067\001\002\000\016" +
    "\002\uffdb\005\uffdb\015\uffdb\032\uffdb\033\uffdb\036\uffdb\001" +
    "\002\000\006\013\uffd7\067\uffd7\001\002\000\016\002\uffe0" +
    "\005\uffe0\015\uffe0\032\uffe0\033\uffe0\036\uffe0\001\002\000" +
    "\072\002\uffcb\005\uffcb\013\uffcb\015\uffcb\023\uffcb\024\uffcb" +
    "\031\uffcb\032\uffcb\033\uffcb\035\uffcb\036\uffcb\054\151\055" +
    "\uffcb\056\uffcb\057\uffcb\060\uffcb\061\uffcb\062\uffcb\063\uffcb" +
    "\064\uffcb\066\147\067\uffcb\070\uffcb\071\uffcb\072\uffcb\073" +
    "\uffcb\074\uffcb\075\150\001\002\000\004\012\204\001\002" +
    "\000\024\007\022\013\uffec\016\020\017\026\020\016\026" +
    "\024\040\023\041\021\043\025\001\002\000\006\013\uffea" +
    "\067\uffea\001\002\000\006\007\220\065\217\001\002\000" +
    "\004\013\213\001\002\000\006\013\uffed\067\211\001\002" +
    "\000\022\007\022\016\020\017\026\020\016\026\024\040" +
    "\023\041\021\043\025\001\002\000\006\013\uffeb\067\uffeb" +
    "\001\002\000\004\014\214\001\002\000\062\006\004\007" +
    "\ufffe\010\011\011\006\012\ufffe\014\ufffe\015\uffe6\021\ufffe" +
    "\022\ufffe\025\ufffe\027\ufffe\030\ufffe\034\ufffe\037\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\071\ufffe\072\ufffe\001\002\000\004\015\216\001" +
    "\002\000\006\004\ufff9\005\ufff9\001\002\000\004\007\221" +
    "\001\002\000\006\013\uffe8\067\uffe8\001\002\000\006\013" +
    "\uffe9\067\uffe9\001\002\000\004\002\000\001\002\000\004" +
    "\007\224\001\002\000\006\004\ufffb\005\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\012\002\004\003\007\004\011\005\006\001" +
    "\001\000\004\006\222\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\073\016\064\021" +
    "\071\022\070\023\067\024\065\025\062\026\061\027\056" +
    "\030\054\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\030\007\031\010\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\030\010\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\201\027" +
    "\056\030\054\001\001\000\022\021\200\022\070\023\067" +
    "\024\065\025\062\026\061\027\056\030\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\165\022\070" +
    "\023\067\024\065\025\062\026\061\027\056\030\054\001" +
    "\001\000\012\025\164\026\061\027\056\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\155\022\070" +
    "\023\067\024\065\025\062\026\061\027\056\030\054\001" +
    "\001\000\004\034\145\001\001\000\004\033\143\001\001" +
    "\000\022\021\137\022\070\023\067\024\065\025\062\026" +
    "\061\027\056\030\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\136\030\054\001\001\000\004\032" +
    "\125\001\001\000\004\031\120\001\001\000\002\001\001" +
    "\000\022\021\112\022\070\023\067\024\065\025\062\026" +
    "\061\027\056\030\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\107\022\070\023\067\024\065\025" +
    "\062\026\061\027\056\030\054\001\001\000\022\021\106" +
    "\022\070\023\067\024\065\025\062\026\061\027\056\030" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\103\003\007\004\011\005\006\014\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\111\021\071\022\070\023\067\024\065\025\062\026\061" +
    "\027\056\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\115\022\070\023\067" +
    "\024\065\025\062\026\061\027\056\030\054\001\001\000" +
    "\002\001\001\000\022\021\135\022\070\023\067\024\065" +
    "\025\062\026\061\027\056\030\054\001\001\000\002\001" +
    "\001\000\016\023\124\024\065\025\062\026\061\027\056" +
    "\030\054\001\001\000\020\022\123\023\067\024\065\025" +
    "\062\026\061\027\056\030\054\001\001\000\002\001\001" +
    "\000\004\031\120\001\001\000\004\032\125\001\001\000" +
    "\014\024\134\025\062\026\061\027\056\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\144\026\061\027\056\030\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\151\022\070\023\067\024\065\025" +
    "\062\026\061\027\056\030\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\015\157\016\064\021\071\022\070" +
    "\023\067\024\065\025\062\026\061\027\056\030\054\001" +
    "\001\000\004\017\161\001\001\000\026\015\163\016\064" +
    "\021\071\022\070\023\067\024\065\025\062\026\061\027" +
    "\056\030\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\167\016\064\021\071\022\070\023\067\024\065" +
    "\025\062\026\061\027\056\030\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\020\173" +
    "\021\174\022\070\023\067\024\065\025\062\026\061\027" +
    "\056\030\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\177\022\070\023\067\024\065\025\062\026" +
    "\061\027\056\030\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\034\145\001\001\000" +
    "\002\001\001\000\012\006\205\011\206\012\207\013\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\205\013\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\103\003" +
    "\007\004\011\005\006\014\214\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {
  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= OPDec SInst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPDec ::= SDec SEP_SECCION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPDec ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OPDec",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SDec ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SDec ::= SDec PUNTO_COMA Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SDec",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR TipoVar IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE TipoVar IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROCEDIMIENTO IDEN PAR_APER ParamFormales PAR_CIER CORCHE_APER Bloque CORCHE_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TipoVar ::= ENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoVar ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoVar ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoVar ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoVar ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoVar ::= POINTER TipoVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoVar ::= ARRAY CORCHE_RECT_APER NUM_ENTERO CORCHE_RECT_CIER OF TipoVar 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoVar ::= RECORD CORCHE_APER ListaCampos CORCHE_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListaCampos ::= ListaCampos PUNTO_COMA Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCampos",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListaCampos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaCampos",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Campo ::= TipoVar IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Campo",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParamFormales ::= ListaParam 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamFormales",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParamFormales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamFormales",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListaParam ::= ListaParam COMA Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParam",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListaParam ::= Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ListaParam",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Param ::= TipoVar AMPERSAND IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Param ::= TipoVar IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Param",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bloque ::= Programa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bloque ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SInst ::= Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SInst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SInst ::= SInst PUNTO_COMA Inst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("SInst",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= E0 IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= IF E0 THEN SInst Else ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= WHILE E0 DO SInst ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= CALL IDEN PAR_APER ParamReales PAR_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= CORCHE_APER Bloque CORCHE_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Else ::= ELSE SInst 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Else",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParamReales ::= ParamReales COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParamReales ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParamReales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E1 ::= E1 OP1AI E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E2 ::= E2 OP2AI E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E3 ::= E4 OP3NA E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= E5 OP5A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= NUM_REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= LIT_CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= PAR_APER E0 PAR_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // OP1AI ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP1AI ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP2AI ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP2AI ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP2AI ::= MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2AI ::= MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2AI ::= IGUAL_IGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2AI ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP3NA ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP3NA ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP3NA ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP5A ::= CORCHE_RECT_APER E0 CORCHE_RECT_CIER 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5A",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP5A ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5A",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5A ::= FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("OP5A",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

