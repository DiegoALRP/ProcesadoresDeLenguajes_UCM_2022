package asint;

import asint.TinyASint.Suma;
import asint.TinyASint.TipoVar_iden;
import asint.TinyASint.Resta;
import asint.TinyASint.Mul;
import asint.TinyASint.Negativo;
import asint.TinyASint.NotOperation;
import asint.TinyASint.Nulo;
import asint.TinyASint.OPDec;
import asint.TinyASint.Div;
import asint.TinyASint.Else_muchos;
import asint.TinyASint.Entero;
import asint.TinyASint.Flecha;
import asint.TinyASint.IdenExp;
import asint.TinyASint.Igual_igual;
import asint.TinyASint.Inst;
import asint.TinyASint.ListaCampos_muchos;
import asint.TinyASint.LitExp;
import asint.TinyASint.Mayor_igual_que;
import asint.TinyASint.Mayor_que;
import asint.TinyASint.Menor_igual_que;
import asint.TinyASint.Menor_que;
import asint.TinyASint.Mod;
import asint.TinyASint.OrOperation;
import asint.TinyASint.ParamFormales;
import asint.TinyASint.ParamReales_muchos;
import asint.TinyASint.ParamReales_uno;
import asint.TinyASint.Param_amps;
import asint.TinyASint.Param_normal;
import asint.TinyASint.PointerAst;
import asint.TinyASint.Prog;
import asint.TinyASint.AndOperation;
import asint.TinyASint.Array;
import asint.TinyASint.Bloque;
import asint.TinyASint.BooleanExp;
import asint.TinyASint.Campo;
import asint.TinyASint.Dec_proc;
import asint.TinyASint.Distinto_distinto;
import asint.TinyASint.SDec_muchas ;
import asint.TinyASint.SDec_una;
import asint.TinyASint.SInst_muchas;
import asint.TinyASint.SInst_una;
import asint.TinyASint.Real;
import asint.TinyASint.TipoVar;
import asint.TinyASint.TipoVar_array;
import asint.TinyASint.ListaCampos_uno;
import asint.TinyASint.Lista_param_muchos;
import asint.TinyASint.Lista_param_uno;
import asint.TinyASint.TipoVar_record;
import asint.TinyASint.Punto;
import asint.TinyASint.Dec_type;
import asint.TinyASint.Dec_var;

//Donde puedo procesar los diferentes tipos de nodos
public interface Procesamiento {
    void procesa(Suma exp);
    void procesa(Resta exp);
    void procesa(AndOperation exp);
    void procesa(OrOperation exp);
    void procesa(Mayor_que exp);
    void procesa(Menor_que exp);
    void procesa(Mayor_igual_que exp);
    void procesa(Menor_igual_que exp);
    void procesa(Igual_igual exp);
    void procesa(Distinto_distinto exp);
    void procesa(Mul exp);
    void procesa(Div exp);
    void procesa(Negativo exp);
    void procesa(NotOperation exp);
    void procesa(BooleanExp exp);
    void procesa(Entero exp);
    void procesa(Real exp);
    void procesa(SDec_muchas decs);
    void procesa(SDec_una decs);
    void procesa(SInst_muchas sInst_muchas);
    void procesa(SInst_una sInst_una);
    void procesa(Inst inst);
    void procesa(Prog prog);
    void procesa(Punto punto);
    void procesa(Flecha flecha);
    void procesa(Array array);
    void procesa(PointerAst pointerAst);
    void procesa(IdenExp idenExp);
    void procesa(LitExp litExp);
    void procesa(Nulo nulo);
    void procesa(Mod mod);
    void procesa(TipoVar_iden tipoVar_iden);
    void procesa(TipoVar tipoVar);
    void procesa(Else_muchos else_muchos);
    void procesa(ParamReales_muchos paramReales_muchos);
    void procesa(ParamReales_uno paramReales_uno);
    void procesa(ParamFormales paramFormales);
    void procesa(TipoVar_record tipoVar_record);
    void procesa(TipoVar_array tipoVar_array);
    void procesa(ListaCampos_muchos listaCampos_muchos);
    void procesa(ListaCampos_uno listaCampos_uno);
    void procesa(Campo campo);
    void procesa(Dec_proc dec_proc);
    void procesa(Dec_type dec_type);
    void procesa(Dec_var dec_var);
    void procesa(Lista_param_muchos lista_param_muchos);
    void procesa(Lista_param_uno lista_param_uno);
    void procesa(Param_amps param_amps);
    void procesa(Param_normal param_normal);
    void procesa(Bloque bloque);
    void procesa(OPDec opDec);
}