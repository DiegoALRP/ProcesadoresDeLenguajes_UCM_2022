/* Generated By:JavaCC: Do not edit this line. ConstructorASTConstants.java */
package c_ast_descendente;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ConstructorASTConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int parteEntera = 4;
  /** RegularExpression Id. */
  int parteDecimal = 5;
  /** RegularExpression Id. */
  int parteExponencial = 6;
  /** RegularExpression Id. */
  int ent = 9;
  /** RegularExpression Id. */
  int real = 10;
  /** RegularExpression Id. */
  int bool = 11;
  /** RegularExpression Id. */
  int True = 12;
  /** RegularExpression Id. */
  int False = 13;
  /** RegularExpression Id. */
  int and = 14;
  /** RegularExpression Id. */
  int or = 15;
  /** RegularExpression Id. */
  int not = 16;
  /** RegularExpression Id. */
  int string = 17;
  /** RegularExpression Id. */
  int Null = 18;
  /** RegularExpression Id. */
  int procedimiento = 19;
  /** RegularExpression Id. */
  int If = 20;
  /** RegularExpression Id. */
  int Then = 21;
  /** RegularExpression Id. */
  int Else = 22;
  /** RegularExpression Id. */
  int endif = 23;
  /** RegularExpression Id. */
  int While = 24;
  /** RegularExpression Id. */
  int Do = 25;
  /** RegularExpression Id. */
  int endwhile = 26;
  /** RegularExpression Id. */
  int call = 27;
  /** RegularExpression Id. */
  int record = 28;
  /** RegularExpression Id. */
  int array = 29;
  /** RegularExpression Id. */
  int of = 30;
  /** RegularExpression Id. */
  int pointer = 31;
  /** RegularExpression Id. */
  int New = 32;
  /** RegularExpression Id. */
  int delete = 33;
  /** RegularExpression Id. */
  int read = 34;
  /** RegularExpression Id. */
  int write = 35;
  /** RegularExpression Id. */
  int nl = 36;
  /** RegularExpression Id. */
  int var = 37;
  /** RegularExpression Id. */
  int type = 38;
  /** RegularExpression Id. */
  int lit_cadena = 39;
  /** RegularExpression Id. */
  int numeroEntero = 40;
  /** RegularExpression Id. */
  int numeroReal = 41;
  /** RegularExpression Id. */
  int iden = 42;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<parteEntera>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"int\"",
    "\"real\"",
    "\"bool\"",
    "\"true\"",
    "\"false\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"string\"",
    "\"null\"",
    "\"proc\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"while\"",
    "\"do\"",
    "\"endwhile\"",
    "\"call\"",
    "\"record\"",
    "\"array\"",
    "\"of\"",
    "\"pointer\"",
    "\"new\"",
    "\"delete\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"var\"",
    "\"type\"",
    "<lit_cadena>",
    "<numeroEntero>",
    "<numeroReal>",
    "<iden>",
    "\"&\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\">\"",
    "\"<\"",
    "\"<=\"",
    "\">=\"",
    "\"==\"",
    "\"!=\"",
    "\"/\"",
    "\"%\"",
    "\".\"",
    "\"->\"",
  };

}
