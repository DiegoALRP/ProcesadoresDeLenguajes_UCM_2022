
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun May 08 19:48:22 CEST 2022
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Else;
import asint.TinyASint.Exp;
import asint.TinyASint.ParamReales;
import asint.TinyASint.ParamFormales;
import asint.TinyASint.StringLocalizado;
import asint.TinyASint.Suma;
import asint.TinyASint.Bloque;
import asint.TinyASint.TipoBool;
import asint.TinyASint.TipoEntero;
import asint.TinyASint.TipoReal;
import asint.TinyASint.TipoString;
import asint.TinyASint.TipoVar_iden;
import asint.TinyASint.TipoVar_pointer;
import asint.TinyASint.Resta;
import asint.TinyASint.Mul;
import asint.TinyASint.Negativo;
import asint.TinyASint.NotOperation;
import asint.TinyASint.Nulo;
import asint.TinyASint.OPDec;
import asint.TinyASint.Div;
import asint.TinyASint.Else_muchos;
import asint.TinyASint.Else_ninguno;
import asint.TinyASint.Entero;
import asint.TinyASint.FalseExp;
import asint.TinyASint.Flecha;
import asint.TinyASint.IdenExp;
import asint.TinyASint.Igual_igual;
import asint.TinyASint.Inst_asig;
import asint.TinyASint.Inst_bloque;
import asint.TinyASint.Inst_call;
import asint.TinyASint.Inst_delete;
import asint.TinyASint.Inst_if;
import asint.TinyASint.Inst_new;
import asint.TinyASint.Inst_nl;
import asint.TinyASint.Inst_read;
import asint.TinyASint.Inst_while;
import asint.TinyASint.Inst_write;
import asint.TinyASint.Inst;
import asint.TinyASint.ListaCampos_muchos;
import asint.TinyASint.LitExp;
import asint.TinyASint.Mayor_igual_que;
import asint.TinyASint.Mayor_que;
import asint.TinyASint.Menor_igual_que;
import asint.TinyASint.Menor_que;
import asint.TinyASint.Mod;
import asint.TinyASint.OrOperation;
import asint.TinyASint.ParamReales_muchos;
import asint.TinyASint.ParamReales_ninguno;
import asint.TinyASint.ParamReales_uno;
import asint.TinyASint.Param_amps;
import asint.TinyASint.Param_normal;
import asint.TinyASint.Param;
import asint.TinyASint.PointerAst;
import asint.TinyASint.Prog;
import asint.TinyASint.SInst;
import asint.TinyASint.TipoVar;
import asint.TinyASint.Prog_con_decs;
import asint.TinyASint.Prog_sin_decs;
import asint.TinyASint.AndOperation;
import asint.TinyASint.Array;
import asint.TinyASint.Bloque_con;
import asint.TinyASint.Bloque_sin;
import asint.TinyASint.Campo;
import asint.TinyASint.Dec_proc;
import asint.TinyASint.Dec;
import asint.TinyASint.SDec;
import asint.TinyASint.Distinto_distinto;
import asint.TinyASint.SDec_muchas;
import asint.TinyASint.SDec_una;
import asint.TinyASint.SInst_muchas;
import asint.TinyASint.SInst_una;
import asint.TinyASint.Real;
import asint.TinyASint.TipoVar_array;
import asint.TinyASint.ListaCampos_uno;
import asint.TinyASint.ListaCampos;
import asint.TinyASint.Lista_param_muchos;
import asint.TinyASint.Lista_param_uno;
import asint.TinyASint.TipoVar_record;
import asint.TinyASint.TrueExp;
import asint.TinyASint.ListaParam;
import asint.TinyASint.Punto;
import asint.TinyASint.Dec_type;
import asint.TinyASint.Dec_var;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun May 08 19:48:22 CEST 2022
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\003\000\002\004\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\012\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\004\000\002\006" +
    "\010\000\002\006\006\000\002\007\005\000\002\007\003" +
    "\000\002\010\004\000\002\011\003\000\002\011\002\000" +
    "\002\012\005\000\002\012\003\000\002\013\005\000\002" +
    "\013\004\000\002\014\003\000\002\014\002\000\002\015" +
    "\003\000\002\015\005\000\002\016\005\000\002\016\010" +
    "\000\002\016\007\000\002\016\004\000\002\016\004\000" +
    "\002\016\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\007\000\002\016\005\000\002\017\004\000\002\017" +
    "\002\000\002\020\005\000\002\020\003\000\002\020\002" +
    "\000\002\021\005\000\002\021\005\000\002\021\003\000" +
    "\002\022\005\000\002\022\003\000\002\023\005\000\002" +
    "\023\003\000\002\024\005\000\002\024\003\000\002\025" +
    "\004\000\002\025\004\000\002\025\003\000\002\026\006" +
    "\000\002\026\005\000\002\026\003\000\002\027\004\000" +
    "\002\027\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\030\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\005\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\060\006\004\007\011\010\006\011\ufffe\013" +
    "\ufffe\020\ufffe\021\ufffe\024\ufffe\026\ufffe\027\ufffe\033\ufffe" +
    "\036\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\065" +
    "\ufffe\066\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002" +
    "\000\022\015\020\016\026\017\016\025\024\037\023\040" +
    "\021\042\025\072\022\001\002\000\004\002\221\001\002" +
    "\000\004\072\202\001\002\000\006\004\ufffd\005\ufffd\001" +
    "\002\000\052\011\073\013\101\020\057\021\075\024\053" +
    "\026\100\027\061\033\052\036\051\043\076\044\077\045" +
    "\047\046\064\047\103\065\046\066\067\072\056\073\102" +
    "\074\054\075\050\001\002\000\022\015\020\016\026\017" +
    "\016\025\024\037\023\040\021\042\025\072\022\001\002" +
    "\000\006\004\013\005\014\001\002\000\052\011\uffff\013" +
    "\uffff\020\uffff\021\uffff\024\uffff\026\uffff\027\uffff\033\uffff" +
    "\036\uffff\043\uffff\044\uffff\045\uffff\046\uffff\047\uffff\065" +
    "\uffff\066\uffff\072\uffff\073\uffff\074\uffff\075\uffff\001\002" +
    "\000\010\006\004\007\011\010\006\001\002\000\006\004" +
    "\ufffc\005\ufffc\001\002\000\006\061\ufff6\072\ufff6\001\002" +
    "\000\004\072\045\001\002\000\006\061\ufff8\072\ufff8\001" +
    "\002\000\004\050\040\001\002\000\006\061\ufff4\072\ufff4" +
    "\001\002\000\004\013\030\001\002\000\006\061\ufff5\072" +
    "\ufff5\001\002\000\022\015\020\016\026\017\016\025\024" +
    "\037\023\040\021\042\025\072\022\001\002\000\006\061" +
    "\ufff7\072\ufff7\001\002\000\006\061\ufff3\072\ufff3\001\002" +
    "\000\022\015\020\016\026\017\016\025\024\037\023\040" +
    "\021\042\025\072\022\001\002\000\004\072\037\001\002" +
    "\000\006\005\035\014\034\001\002\000\006\005\uffef\014" +
    "\uffef\001\002\000\006\061\ufff1\072\ufff1\001\002\000\022" +
    "\015\020\016\026\017\016\025\024\037\023\040\021\042" +
    "\025\072\022\001\002\000\006\005\ufff0\014\ufff0\001\002" +
    "\000\006\005\uffee\014\uffee\001\002\000\004\073\041\001" +
    "\002\000\004\051\042\001\002\000\004\041\043\001\002" +
    "\000\022\015\020\016\026\017\016\025\024\037\023\040" +
    "\021\042\025\072\022\001\002\000\006\061\ufff2\072\ufff2" +
    "\001\002\000\006\004\ufffa\005\ufffa\001\002\000\024\011" +
    "\073\020\057\021\075\026\100\066\067\072\056\073\102" +
    "\074\054\075\050\001\002\000\030\011\073\020\057\021" +
    "\075\024\053\026\100\065\046\066\067\072\056\073\102" +
    "\074\054\075\050\001\002\000\072\002\uffbf\005\uffbf\012" +
    "\uffbf\014\uffbf\022\uffbf\023\uffbf\030\uffbf\031\uffbf\032\uffbf" +
    "\034\uffbf\035\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054" +
    "\uffbf\055\uffbf\056\uffbf\057\uffbf\060\uffbf\062\uffbf\063\uffbf" +
    "\064\uffbf\065\uffbf\066\uffbf\067\uffbf\070\uffbf\071\uffbf\001" +
    "\002\000\004\072\171\001\002\000\030\011\073\020\057" +
    "\021\075\024\053\026\100\065\046\066\067\072\056\073" +
    "\102\074\054\075\050\001\002\000\030\011\073\020\057" +
    "\021\075\024\053\026\100\065\046\066\067\072\056\073" +
    "\102\074\054\075\050\001\002\000\072\002\uffc0\005\uffc0" +
    "\012\uffc0\014\uffc0\022\uffc0\023\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\034\uffc0\035\uffc0\050\uffc0\051\uffc0\052\uffc0\053\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\062\uffc0\063" +
    "\uffc0\064\uffc0\065\uffc0\066\uffc0\067\uffc0\070\uffc0\071\uffc0" +
    "\001\002\000\072\002\uffc4\005\uffc4\012\uffc4\014\uffc4\022" +
    "\uffc4\023\uffc4\030\uffc4\031\uffc4\032\uffc4\034\uffc4\035\uffc4" +
    "\050\uffc4\051\uffc4\052\uffc4\053\uffc4\054\uffc4\055\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\062\uffc4\063\uffc4\064\uffc4\065\uffc4" +
    "\066\uffc4\067\uffc4\070\uffc4\071\uffc4\001\002\000\072\002" +
    "\uffbd\005\uffbd\012\uffbd\014\uffbd\022\uffbd\023\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\034\uffbd\035\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\065\uffbd\066\uffbd\067\uffbd\070" +
    "\uffbd\071\uffbd\001\002\000\072\002\uffc3\005\uffc3\012\uffc3" +
    "\014\uffc3\022\uffc3\023\uffc3\030\uffc3\031\uffc3\032\uffc3\034" +
    "\uffc3\035\uffc3\050\uffc3\051\uffc3\052\uffc3\053\uffc3\054\uffc3" +
    "\055\uffc3\056\uffc3\057\uffc3\060\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\065\uffc3\066\uffc3\067\uffc3\070\uffc3\071\uffc3\001\002" +
    "\000\072\002\uffc6\005\uffc6\012\uffc6\014\uffc6\022\uffc6\023" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\034\uffc6\035\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\071\uffc6\001\002\000\030\011\073\020" +
    "\057\021\075\024\053\026\100\065\046\066\067\072\056" +
    "\073\102\074\054\075\050\001\002\000\072\002\uffc9\005" +
    "\uffc9\012\uffc9\014\uffc9\022\uffc9\023\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\034\uffc9\035\uffc9\050\151\051\uffc9\052\uffc9\053" +
    "\uffc9\054\uffc9\055\uffc9\056\uffc9\057\uffc9\060\uffc9\062\147" +
    "\063\uffc9\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\071" +
    "\150\001\002\000\064\002\uffcc\005\uffcc\012\uffcc\014\uffcc" +
    "\022\uffcc\023\uffcc\030\uffcc\031\uffcc\032\uffcc\034\uffcc\035" +
    "\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\063\uffcc\064\uffcc\065\uffcc\066\143\067" +
    "\142\070\141\001\002\000\030\011\073\020\057\021\075" +
    "\024\053\026\100\065\046\066\067\072\056\073\102\074" +
    "\054\075\050\001\002\000\016\002\uffe5\005\uffe5\014\uffe5" +
    "\031\uffe5\032\uffe5\035\uffe5\001\002\000\056\002\uffce\005" +
    "\uffce\012\uffce\014\uffce\022\uffce\023\uffce\030\uffce\031\uffce" +
    "\032\uffce\034\uffce\035\uffce\051\uffce\052\uffce\053\uffce\054" +
    "\uffce\055\uffce\056\uffce\057\uffce\060\uffce\063\uffce\064\uffce" +
    "\065\uffce\001\002\000\024\011\073\020\057\021\075\026" +
    "\100\066\067\072\056\073\102\074\054\075\050\001\002" +
    "\000\056\002\uffd0\005\uffd0\012\uffd0\014\uffd0\022\uffd0\023" +
    "\uffd0\030\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\051\uffd0" +
    "\052\uffd0\053\127\054\132\055\131\056\134\057\133\060" +
    "\130\063\uffd0\064\uffd0\065\uffd0\001\002\000\042\002\uffd2" +
    "\005\uffd2\012\uffd2\014\uffd2\022\120\023\123\030\uffd2\031" +
    "\uffd2\032\uffd2\034\uffd2\035\uffd2\051\uffd2\052\uffd2\063\uffd2" +
    "\064\117\065\122\001\002\000\004\052\115\001\002\000" +
    "\030\011\073\020\057\021\075\024\053\026\100\065\046" +
    "\066\067\072\056\073\102\074\054\075\050\001\002\000" +
    "\010\002\001\005\111\014\001\001\002\000\072\002\uffc2" +
    "\005\uffc2\012\uffc2\014\uffc2\022\uffc2\023\uffc2\030\uffc2\031" +
    "\uffc2\032\uffc2\034\uffc2\035\uffc2\050\uffc2\051\uffc2\052\uffc2" +
    "\053\uffc2\054\uffc2\055\uffc2\056\uffc2\057\uffc2\060\uffc2\062" +
    "\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2\070\uffc2" +
    "\071\uffc2\001\002\000\030\011\073\020\057\021\075\024" +
    "\053\026\100\065\046\066\067\072\056\073\102\074\054" +
    "\075\050\001\002\000\030\011\073\020\057\021\075\024" +
    "\053\026\100\065\046\066\067\072\056\073\102\074\054" +
    "\075\050\001\002\000\072\002\uffbe\005\uffbe\012\uffbe\014" +
    "\uffbe\022\uffbe\023\uffbe\030\uffbe\031\uffbe\032\uffbe\034\uffbe" +
    "\035\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\062\uffbe\063\uffbe\064\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\071\uffbe\001\002\000" +
    "\062\006\004\007\011\010\006\011\ufffe\013\ufffe\014\uffe6" +
    "\020\ufffe\021\ufffe\024\ufffe\026\ufffe\027\ufffe\033\ufffe\036" +
    "\ufffe\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\065\ufffe" +
    "\066\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000" +
    "\072\002\uffc1\005\uffc1\012\uffc1\014\uffc1\022\uffc1\023\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\034\uffc1\035\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\056\uffc1\057\uffc1" +
    "\060\uffc1\062\uffc1\063\uffc1\064\uffc1\065\uffc1\066\uffc1\067" +
    "\uffc1\070\uffc1\071\uffc1\001\002\000\016\002\uffde\005\uffde" +
    "\014\uffde\031\uffde\032\uffde\035\uffde\001\002\000\004\014" +
    "\uffe7\001\002\000\004\014\106\001\002\000\016\002\uffda" +
    "\005\uffda\014\uffda\031\uffda\032\uffda\035\uffda\001\002\000" +
    "\016\002\uffdc\005\uffdc\014\uffdc\031\uffdc\032\uffdc\035\uffdc" +
    "\001\002\000\016\002\uffdd\005\uffdd\014\uffdd\031\uffdd\032" +
    "\uffdd\035\uffdd\001\002\000\052\011\073\013\101\020\057" +
    "\021\075\024\053\026\100\027\061\033\052\036\051\043" +
    "\076\044\077\045\047\046\064\047\103\065\046\066\067" +
    "\072\056\073\102\074\054\075\050\001\002\000\016\002" +
    "\uffe4\005\uffe4\014\uffe4\031\uffe4\032\uffe4\035\uffe4\001\002" +
    "\000\004\012\114\001\002\000\072\002\uffbc\005\uffbc\012" +
    "\uffbc\014\uffbc\022\uffbc\023\uffbc\030\uffbc\031\uffbc\032\uffbc" +
    "\034\uffbc\035\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc\054" +
    "\uffbc\055\uffbc\056\uffbc\057\uffbc\060\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\071\uffbc\001" +
    "\002\000\030\011\073\020\057\021\075\024\053\026\100" +
    "\065\046\066\067\072\056\073\102\074\054\075\050\001" +
    "\002\000\016\002\uffe3\005\uffe3\014\uffe3\031\uffe3\032\uffe3" +
    "\035\uffe3\001\002\000\030\011\073\020\057\021\075\024" +
    "\053\026\100\065\046\066\067\072\056\073\102\074\054" +
    "\075\050\001\002\000\030\011\uffbb\020\uffbb\021\uffbb\024" +
    "\uffbb\026\uffbb\065\uffbb\066\uffbb\072\uffbb\073\uffbb\074\uffbb" +
    "\075\uffbb\001\002\000\030\011\073\020\057\021\075\024" +
    "\053\026\100\065\046\066\067\072\056\073\102\074\054" +
    "\075\050\001\002\000\030\011\073\020\057\021\075\024" +
    "\053\026\100\065\046\066\067\072\056\073\102\074\054" +
    "\075\050\001\002\000\030\011\uffba\020\uffba\021\uffba\024" +
    "\uffba\026\uffba\065\uffba\066\uffba\072\uffba\073\uffba\074\uffba" +
    "\075\uffba\001\002\000\036\002\uffd3\005\uffd3\012\uffd3\014" +
    "\uffd3\022\120\023\123\030\uffd3\031\uffd3\032\uffd3\034\uffd3" +
    "\035\uffd3\051\uffd3\052\uffd3\063\uffd3\001\002\000\056\002" +
    "\uffd1\005\uffd1\012\uffd1\014\uffd1\022\uffd1\023\uffd1\030\uffd1" +
    "\031\uffd1\032\uffd1\034\uffd1\035\uffd1\051\uffd1\052\uffd1\053" +
    "\127\054\132\055\131\056\134\057\133\060\130\063\uffd1" +
    "\064\uffd1\065\uffd1\001\002\000\030\011\073\020\057\021" +
    "\075\024\053\026\100\065\046\066\067\072\056\073\102" +
    "\074\054\075\050\001\002\000\030\011\uffb5\020\uffb5\021" +
    "\uffb5\024\uffb5\026\uffb5\065\uffb5\066\uffb5\072\uffb5\073\uffb5" +
    "\074\uffb5\075\uffb5\001\002\000\030\011\uffb4\020\uffb4\021" +
    "\uffb4\024\uffb4\026\uffb4\065\uffb4\066\uffb4\072\uffb4\073\uffb4" +
    "\074\uffb4\075\uffb4\001\002\000\030\011\uffb9\020\uffb9\021" +
    "\uffb9\024\uffb9\026\uffb9\065\uffb9\066\uffb9\072\uffb9\073\uffb9" +
    "\074\uffb9\075\uffb9\001\002\000\030\011\uffb8\020\uffb8\021" +
    "\uffb8\024\uffb8\026\uffb8\065\uffb8\066\uffb8\072\uffb8\073\uffb8" +
    "\074\uffb8\075\uffb8\001\002\000\030\011\uffb7\020\uffb7\021" +
    "\uffb7\024\uffb7\026\uffb7\065\uffb7\066\uffb7\072\uffb7\073\uffb7" +
    "\074\uffb7\075\uffb7\001\002\000\030\011\uffb6\020\uffb6\021" +
    "\uffb6\024\uffb6\026\uffb6\065\uffb6\066\uffb6\072\uffb6\073\uffb6" +
    "\074\uffb6\075\uffb6\001\002\000\056\002\uffcf\005\uffcf\012" +
    "\uffcf\014\uffcf\022\uffcf\023\uffcf\030\uffcf\031\uffcf\032\uffcf" +
    "\034\uffcf\035\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\063\uffcf\064\uffcf\065\uffcf" +
    "\001\002\000\032\002\uffd4\005\uffd4\012\uffd4\014\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\034\uffd4\035\uffd4\051\uffd4\052\uffd4" +
    "\063\uffd4\001\002\000\072\002\uffc5\005\uffc5\012\uffc5\014" +
    "\uffc5\022\uffc5\023\uffc5\030\uffc5\031\uffc5\032\uffc5\034\uffc5" +
    "\035\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\062\uffc5\063\uffc5\064\uffc5" +
    "\065\uffc5\066\uffc5\067\uffc5\070\uffc5\071\uffc5\001\002\000" +
    "\016\002\uffdf\005\uffdf\014\uffdf\031\uffdf\032\uffdf\035\uffdf" +
    "\001\002\000\030\011\uffb1\020\uffb1\021\uffb1\024\uffb1\026" +
    "\uffb1\065\uffb1\066\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1" +
    "\001\002\000\030\011\uffb2\020\uffb2\021\uffb2\024\uffb2\026" +
    "\uffb2\065\uffb2\066\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2" +
    "\001\002\000\030\011\uffb3\020\uffb3\021\uffb3\024\uffb3\026" +
    "\uffb3\065\uffb3\066\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3" +
    "\001\002\000\030\011\073\020\057\021\075\024\053\026" +
    "\100\065\046\066\067\072\056\073\102\074\054\075\050" +
    "\001\002\000\056\002\uffcd\005\uffcd\012\uffcd\014\uffcd\022" +
    "\uffcd\023\uffcd\030\uffcd\031\uffcd\032\uffcd\034\uffcd\035\uffcd" +
    "\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\063\uffcd\064\uffcd\065\uffcd\001\002\000\004" +
    "\072\154\001\002\000\004\072\uffaf\001\002\000\004\072" +
    "\uffb0\001\002\000\030\011\073\020\057\021\075\024\053" +
    "\026\100\065\046\066\067\072\056\073\102\074\054\075" +
    "\050\001\002\000\004\051\153\001\002\000\072\002\uffc8" +
    "\005\uffc8\012\uffc8\014\uffc8\022\uffc8\023\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\034\uffc8\035\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8\060\uffc8\062" +
    "\uffc8\063\uffc8\064\uffc8\065\uffc8\066\uffc8\067\uffc8\070\uffc8" +
    "\071\uffc8\001\002\000\072\002\uffc7\005\uffc7\012\uffc7\014" +
    "\uffc7\022\uffc7\023\uffc7\030\uffc7\031\uffc7\032\uffc7\034\uffc7" +
    "\035\uffc7\050\uffc7\051\uffc7\052\uffc7\053\uffc7\054\uffc7\055" +
    "\uffc7\056\uffc7\057\uffc7\060\uffc7\062\uffc7\063\uffc7\064\uffc7" +
    "\065\uffc7\066\uffc7\067\uffc7\070\uffc7\071\uffc7\001\002\000" +
    "\004\030\156\001\002\000\052\011\073\013\101\020\057" +
    "\021\075\024\053\026\100\027\061\033\052\036\051\043" +
    "\076\044\077\045\047\046\064\047\103\065\046\066\067" +
    "\072\056\073\102\074\054\075\050\001\002\000\010\005" +
    "\111\031\160\032\uffd8\001\002\000\052\011\073\013\101" +
    "\020\057\021\075\024\053\026\100\027\061\033\052\036" +
    "\051\043\076\044\077\045\047\046\064\047\103\065\046" +
    "\066\067\072\056\073\102\074\054\075\050\001\002\000" +
    "\004\032\162\001\002\000\016\002\uffe2\005\uffe2\014\uffe2" +
    "\031\uffe2\032\uffe2\035\uffe2\001\002\000\006\005\111\032" +
    "\uffd9\001\002\000\064\002\uffca\005\uffca\012\uffca\014\uffca" +
    "\022\uffca\023\uffca\030\uffca\031\uffca\032\uffca\034\uffca\035" +
    "\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055\uffca\056\uffca" +
    "\057\uffca\060\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067" +
    "\uffca\070\uffca\001\002\000\004\034\166\001\002\000\052" +
    "\011\073\013\101\020\057\021\075\024\053\026\100\027" +
    "\061\033\052\036\051\043\076\044\077\045\047\046\064" +
    "\047\103\065\046\066\067\072\056\073\102\074\054\075" +
    "\050\001\002\000\006\005\111\035\170\001\002\000\016" +
    "\002\uffe1\005\uffe1\014\uffe1\031\uffe1\032\uffe1\035\uffe1\001" +
    "\002\000\004\011\172\001\002\000\034\011\073\012\uffd5" +
    "\020\057\021\075\024\053\026\100\063\uffd5\065\046\066" +
    "\067\072\056\073\102\074\054\075\050\001\002\000\006" +
    "\012\176\063\175\001\002\000\006\012\uffd6\063\uffd6\001" +
    "\002\000\030\011\073\020\057\021\075\024\053\026\100" +
    "\065\046\066\067\072\056\073\102\074\054\075\050\001" +
    "\002\000\016\002\uffdb\005\uffdb\014\uffdb\031\uffdb\032\uffdb" +
    "\035\uffdb\001\002\000\006\012\uffd7\063\uffd7\001\002\000" +
    "\016\002\uffe0\005\uffe0\014\uffe0\031\uffe0\032\uffe0\035\uffe0" +
    "\001\002\000\072\002\uffcb\005\uffcb\012\uffcb\014\uffcb\022" +
    "\uffcb\023\uffcb\030\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\050\151\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\056" +
    "\uffcb\057\uffcb\060\uffcb\062\147\063\uffcb\064\uffcb\065\uffcb" +
    "\066\uffcb\067\uffcb\070\uffcb\071\150\001\002\000\004\011" +
    "\203\001\002\000\024\012\uffec\015\020\016\026\017\016" +
    "\025\024\037\023\040\021\042\025\072\022\001\002\000" +
    "\006\012\uffea\063\uffea\001\002\000\006\061\216\072\217" +
    "\001\002\000\004\012\212\001\002\000\006\012\uffed\063" +
    "\210\001\002\000\022\015\020\016\026\017\016\025\024" +
    "\037\023\040\021\042\025\072\022\001\002\000\006\012" +
    "\uffeb\063\uffeb\001\002\000\004\013\213\001\002\000\062" +
    "\006\004\007\011\010\006\011\ufffe\013\ufffe\014\uffe6\020" +
    "\ufffe\021\ufffe\024\ufffe\026\ufffe\027\ufffe\033\ufffe\036\ufffe" +
    "\043\ufffe\044\ufffe\045\ufffe\046\ufffe\047\ufffe\065\ufffe\066" +
    "\ufffe\072\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000\004" +
    "\014\215\001\002\000\006\004\ufff9\005\ufff9\001\002\000" +
    "\004\072\220\001\002\000\006\012\uffe8\063\uffe8\001\002" +
    "\000\006\012\uffe9\063\uffe9\001\002\000\004\002\000\001" +
    "\002\000\004\072\223\001\002\000\006\004\ufffb\005\ufffb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\012\002\004\003\007\004\011\005\006\001" +
    "\001\000\004\006\221\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\015\073\016\064\021" +
    "\071\022\070\023\067\024\065\025\062\026\061\027\057" +
    "\030\054\001\001\000\004\006\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\006\030\007\031\010\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\030\010\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\026\200\027" +
    "\057\030\054\001\001\000\022\021\177\022\070\023\067" +
    "\024\065\025\062\026\061\027\057\030\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\164\022\070" +
    "\023\067\024\065\025\062\026\061\027\057\030\054\001" +
    "\001\000\012\025\163\026\061\027\057\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\154\022\070" +
    "\023\067\024\065\025\062\026\061\027\057\030\054\001" +
    "\001\000\004\034\145\001\001\000\004\033\143\001\001" +
    "\000\022\021\137\022\070\023\067\024\065\025\062\026" +
    "\061\027\057\030\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\136\030\054\001\001\000\004\032" +
    "\125\001\001\000\004\031\120\001\001\000\002\001\001" +
    "\000\022\021\112\022\070\023\067\024\065\025\062\026" +
    "\061\027\057\030\054\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\107\022\070\023\067\024\065\025" +
    "\062\026\061\027\057\030\054\001\001\000\022\021\106" +
    "\022\070\023\067\024\065\025\062\026\061\027\057\030" +
    "\054\001\001\000\002\001\001\000\014\002\103\003\007" +
    "\004\011\005\006\014\104\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\016" +
    "\111\021\071\022\070\023\067\024\065\025\062\026\061" +
    "\027\057\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\115\022\070\023\067" +
    "\024\065\025\062\026\061\027\057\030\054\001\001\000" +
    "\002\001\001\000\022\021\135\022\070\023\067\024\065" +
    "\025\062\026\061\027\057\030\054\001\001\000\002\001" +
    "\001\000\016\023\124\024\065\025\062\026\061\027\057" +
    "\030\054\001\001\000\020\022\123\023\067\024\065\025" +
    "\062\026\061\027\057\030\054\001\001\000\002\001\001" +
    "\000\004\031\120\001\001\000\004\032\125\001\001\000" +
    "\014\024\134\025\062\026\061\027\057\030\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\144\026\061\027\057\030\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\021\151\022\070\023\067\024\065\025" +
    "\062\026\061\027\057\030\054\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\015\156\016\064\021\071\022\070\023\067\024\065" +
    "\025\062\026\061\027\057\030\054\001\001\000\004\017" +
    "\160\001\001\000\026\015\162\016\064\021\071\022\070" +
    "\023\067\024\065\025\062\026\061\027\057\030\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\015\166\016" +
    "\064\021\071\022\070\023\067\024\065\025\062\026\061" +
    "\027\057\030\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\020\172\021\173\022\070" +
    "\023\067\024\065\025\062\026\061\027\057\030\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\176" +
    "\022\070\023\067\024\065\025\062\026\061\027\057\030" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\034\145\001\001\000\002\001\001\000" +
    "\012\006\204\011\205\012\206\013\203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\204\013\210\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\103\003\007\004\011\005" +
    "\006\014\213\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= OPDec SInst 
            {
              Prog RESULT =null;
		OPDec sdec = (OPDec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		SInst sinst = (SInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog(sdec,sinst);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPDec ::= SDec SEP_SECCION 
            {
              OPDec RESULT =null;
		SDec sdec = (SDec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.opdec(sdec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPDec",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPDec ::= 
            {
              OPDec RESULT =null;
		 RESULT = null;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OPDec",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SDec ::= Dec 
            {
              SDec RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.sdec_una(dec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SDec",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SDec ::= SDec PUNTO_COMA Dec 
            {
              SDec RESULT =null;
		SDec sdec = (SDec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		RESULT = sem.sdec_muchas(sdec, dec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SDec",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR TipoVar IDEN 
            {
              Dec RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE TipoVar IDEN 
            {
              Dec RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_type(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROCEDIMIENTO IDEN PAR_APER ParamFormales PAR_CIER CORCHE_APER Bloque CORCHE_CIER 
            {
              Dec RESULT =null;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-6)).value;
		ParamFormales param = (ParamFormales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = sem.dec_proc(iden,param,bloque);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TipoVar ::= ENT 
            {
              TipoVar RESULT =null;
		RESULT = sem.tipoEntero();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TipoVar ::= REAL 
            {
              TipoVar RESULT =null;
		 RESULT = sem.tipoReal();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TipoVar ::= BOOL 
            {
              TipoVar RESULT =null;
		 RESULT = sem.tipoBool();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TipoVar ::= STRING 
            {
              TipoVar RESULT =null;
		 RESULT = sem.tipoString();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TipoVar ::= IDEN 
            {
              TipoVar RESULT =null;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoVar_iden(iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TipoVar ::= POINTER TipoVar 
            {
              TipoVar RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoVar_pointer(tipo) ;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TipoVar ::= ARRAY CORCHE_RECT_APER NUM_ENTERO CORCHE_RECT_CIER OF TipoVar 
            {
              TipoVar RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipoVar_array(num, tipo);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TipoVar ::= RECORD CORCHE_APER ListaCampos CORCHE_CIER 
            {
              TipoVar RESULT =null;
		ListaCampos campos = (ListaCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = sem.tipoVar_record(campos);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("TipoVar",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ListaCampos ::= ListaCampos PUNTO_COMA Campo 
            {
              ListaCampos RESULT =null;
		ListaCampos campos = (ListaCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT =  sem.listaCampos_muchos(campos, campo);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ListaCampos",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ListaCampos ::= Campo 
            {
              ListaCampos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.listaCampos_uno(campo);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ListaCampos",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Campo ::= TipoVar IDEN 
            {
              Campo RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ParamFormales ::= ListaParam 
            {
              ParamFormales RESULT =null;
		ListaParam params = (ListaParam)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.paramFormales_con(params);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamFormales",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ParamFormales ::= 
            {
              ParamFormales RESULT =null;
		RESULT = sem.paramFormales_sin();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamFormales",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ListaParam ::= ListaParam COMA Param 
            {
              ListaParam RESULT =null;
		ListaParam params = (ListaParam)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_param_muchos(params, param);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ListaParam",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ListaParam ::= Param 
            {
              ListaParam RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lista_param_uno(param);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ListaParam",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Param ::= TipoVar AMPERSAND IDEN 
            {
              Param RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_amps(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Param",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Param ::= TipoVar IDEN 
            {
              Param RESULT =null;
		TipoVar tipo = (TipoVar)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_normal(tipo, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Param",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Bloque ::= Prog 
            {
              Bloque RESULT =null;
		Prog programa = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.bloque_con(programa);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Bloque ::= 
            {
              Bloque RESULT =null;
		RESULT =  sem.bloque_sin();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Bloque",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SInst ::= Inst 
            {
              SInst RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.sinst_uno(inst);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SInst",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SInst ::= SInst PUNTO_COMA Inst 
            {
              SInst RESULT =null;
		SInst sinst = (SInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.sinst_muchos(sinst, inst);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("SInst",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Inst ::= E0 IGUAL E0 
            {
              Inst RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_asig(exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= IF E0 THEN SInst Else ENDIF 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-4)).value;
		SInst sinst = (SInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Else elsee = (Else)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_if(exp, sinst, elsee);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= WHILE E0 DO SInst ENDWHILE 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		SInst sinst = (SInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_while(exp, sinst);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= READ E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_read(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= WRITE E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_write(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.inst_nl();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= NEW E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_new(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= DELETE E0 
            {
              Inst RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.inst_delete(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= CALL IDEN PAR_APER ParamReales PAR_CIER 
            {
              Inst RESULT =null;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		ParamReales paramReales = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_call(iden, paramReales);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= CORCHE_APER Bloque CORCHE_CIER 
            {
              Inst RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.inst_bloque(bloque);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Inst",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Else ::= ELSE SInst 
            {
              Else RESULT =null;
		SInst sinst = (SInst)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.else_muchos(sinst);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Else",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Else ::= 
            {
              Else RESULT =null;
		 RESULT = sem.else_ninguno();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Else",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ParamReales ::= ParamReales COMA E0 
            {
              ParamReales RESULT =null;
		ParamReales paramReales = (ParamReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_reales_muchos(paramReales, exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ParamReales ::= E0 
            {
              ParamReales RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param_reales_uno(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParamReales ::= 
            {
              ParamReales RESULT =null;
		 RESULT = sem.param_reales_ninguno();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParamReales",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // E0 ::= E1 MAS E0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.suma(exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // E0 ::= E1 MENOS E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.resta(exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // E1 ::= E1 OP1AI E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E2 ::= E2 OP2AI E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E3 ::= E4 OP3NA E4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.negativoOperation(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.notOperation(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E5 ::= E5 CORCHE_RECT_APER E0 CORCHE_RECT_CIER 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.array_op(exp1, exp2);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E5 ::= E5 OP5A IDEN 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp_acc(op, exp1, iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E6 ::= POR E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.pointer_ast(exp);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.true_exp();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.false_exp();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E7 ::= NUM_ENTERO 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.entero(num);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= NUM_REAL 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.real(num);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= LIT_CADENA 
            {
              Exp RESULT =null;
		StringLocalizado cadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lit_cadena(cadena);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.nulo();
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado iden = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.identificador(iden);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= PAR_APER E0 PAR_CIER 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = exp;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // OP1AI ::= AND 
            {
              String RESULT =null;
		 RESULT = "and";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // OP1AI ::= OR 
            {
              String RESULT =null;
		 RESULT = "or";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1AI",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OP2AI ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OP2AI ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OP2AI ::= MENOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = "<=";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OP2AI ::= MAYOR_IGUAL 
            {
              String RESULT =null;
		 RESULT = ">=";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OP2AI ::= IGUAL_IGUAL 
            {
              String RESULT =null;
		 RESULT = "==";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OP2AI ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!=";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP2AI",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OP3NA ::= POR 
            {
              String RESULT =null;
		 RESULT = "*";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OP3NA ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OP3NA ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP3NA",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OP5A ::= PUNTO 
            {
              String RESULT =null;
		 RESULT = ".";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP5A",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OP5A ::= FLECHA 
            {
              String RESULT =null;
		 RESULT = "->";
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP5A",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

